#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <iostream>
#include <numeric>

#define count 8

/********************** Vector initialization **************************/
void charger(int t[])
{
	for (int i=0;i<count;i++)
		t[i] = i;
}
/********************** kernel **************************/

__global__ void sum(int* input)
{
	int tid = threadIdx.x;

	auto step_size = 1;
	int number_of_threads = blockDim.x;

	while (number_of_threads > 0)
	{
		if (tid < count) // still alive?
		{
			const auto fst = tid * step_size * 2;
			const auto snd = fst + step_size;
			input[fst] += input[snd];
		}

		step_size <<= 1; //step_size = step_size << 1 ==> step_size = step_size * 2^1
		number_of_threads >>= 1; //number_of_threads = number_of_threads >> 1 ==> number_of_threads = number_of_threads / 2^1
	}
}
/********************** main **************************/
int main()
{
	
	const int size = count * sizeof(int);
	int h[size];
	
	charger(h);

	int* d;
	
	cudaMalloc(&d, size);
	cudaMemcpy(d, h, size, cudaMemcpyHostToDevice);

	sum <<<1, count>>>(d);

	int result;
	cudaMemcpy(&result, d, sizeof(int), cudaMemcpyDeviceToHost);

	cout << "Sum is " << result << endl;
	//printf("%d \n",result);
	getchar();

	cudaFree(d);
	delete[] h;

	return 0;
}